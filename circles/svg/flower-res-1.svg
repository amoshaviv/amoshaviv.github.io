<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" >
<script type="text/javascript"><![CDATA[
	const svgns = "http://www.w3.org/2000/svg";
	const windowCenterX = window.innerWidth / 2;
	const windowCenterY = window.innerHeight / 2;
	const maximumGraphRadius = Math.min(windowCenterX, windowCenterY);
	const maximumGridRadius = Math.max(windowCenterX, windowCenterY);
	const minimalRadius = 1; 
	const angleRatios = [1/36];
	const darkMode = true;
	const svg = document.getElementsByTagName('svg')[0];
	if (darkMode) svg.setAttribute('style', 'background: black');


const getCircleColor = (distanceFromCenter, circleRadius, ray, angle, step) => {
	const distanceRatio = distanceFromCenter / maximumGraphRadius;
	const alpha = (1-distanceRatio);
	const blue = Math.floor(distanceRatio * 255);
	const red = 160 - Math.min(255, step) - blue; 
	const green = 60 - Math.min(255, step) - blue; 
	return { red: '255', green: '255', blue: '255', alpha };
}

const createCircleAnimation = (distanceFromCenter, circleRadius, ray, angle, step) => {
	const circleAnimation = document.createElementNS(svgns, 'animate');

	const cx = distanceFromCenter * Math.cos(angle * ray) + windowCenterX;
	const cy = distanceFromCenter * Math.sin(angle * ray) + windowCenterY;

	circleAnimation.setAttributeNS(null, 'values',  `0;${circleRadius};0`);
	circleAnimation.setAttributeNS(null, 'keyTimes',  '0;0.5;1');
	circleAnimation.setAttributeNS(null, 'dur',   step / (2)  + 's');
	circleAnimation.setAttributeNS(null, 'calcMode', 'paced');
	circleAnimation.setAttributeNS(null, 'repeatCount', 'indefinite');
	circleAnimation.setAttributeNS(null, 'attributeName', 'r');
//	circleAnimation.setAttributeNS(null, 'from', 1);
//	circleAnimation.setAttributeNS(null, 'to', circleRadius);
//	circleAnimation.setAttributeNS(null, 'path', `

//			M ${cx} ${cy} 
//			A ${1},${1} 0 0,0 ${Math.abs(2 * windowCenterX-cx)},${Math.abs(2 * windowCenterY-cy)}
//			`);
	return circleAnimation;
}

const createCircle = (distanceFromCenter, circleRadius, ray, angle, step) => {
	const circle = document.createElementNS(svgns, 'circle');
	const cx = distanceFromCenter * Math.cos(angle * ray) + windowCenterX;
	const cy = distanceFromCenter * Math.sin(angle * ray) + windowCenterY;

	circle.setAttributeNS(null, 'r', 1);
	circle.setAttributeNS(null, 'ray', ray);
	circle.setAttributeNS(null, 'data-step', step);

	const color = getCircleColor(distanceFromCenter, circleRadius, ray, angle, step);
	circle.setAttributeNS(null, 'style', `fill:  transparent; stroke: rgba(${color.red},${color.green},${color.blue}, ${color.alpha});`);
	circle.setAttributeNS(null, 'cx', cx);
	circle.setAttributeNS(null, 'cy', cy);
	const circleAnimation = createCircleAnimation(distanceFromCenter, circleRadius, ray, angle, step);
	circle.appendChild(circleAnimation);

	return circle;
};

angleRatios.forEach(angleRatio => {
		const angle = angleRatio * Math.PI;	
		const factor = (1+Math.sin(angle/2))/(1-Math.sin(angle/2));
		const centerFactor = (1/(Math.sqrt(2) * Math.sin(angle/2)));
		const numberOfRays =(2 / angleRatio);

		let step = 1;
		let radius = minimalRadius;
		let center = radius * centerFactor - centerFactor;
		let distanceFromCenter = (Math.sqrt(2) * center) + step;

		while (distanceFromCenter + radius < maximumGraphRadius) {
			for (let ray = 0; ray < numberOfRays; ray++) {
				const circle = createCircle(distanceFromCenter, radius, ray, angle, step);
				svg.appendChild(circle);
			}

			step++;
			radius = radius * factor;
			center = radius * centerFactor - centerFactor;
			distanceFromCenter = (Math.sqrt(2) * center) + step;
		}
});


]]></script>
</svg>
