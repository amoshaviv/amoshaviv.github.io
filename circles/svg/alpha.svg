<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" >
<script type="text/javascript"><![CDATA[
	const svgns = "http://www.w3.org/2000/svg";
	const windowCenterX = window.innerWidth / 2;
	const windowCenterY = window.innerHeight / 2;
	const maximumGraphRadius = Math.min(windowCenterX, windowCenterY);
	const maximumGridRadius = Math.max(windowCenterX, windowCenterY);
	const minimalRadius = 1; 
	const angleRatios = [1/72];
	const darkMode = true;
	const svg = document.getElementsByTagName('svg')[0];
	if (darkMode) svg.setAttribute('style', 'background: black');


const getCircleColor = (distanceFromCenter, circleRadius, ray, angle, step) => {
	const distanceRatio = distanceFromCenter / maximumGraphRadius;
	const alpha = (1-distanceRatio);
	return { red: 255, green: 255, blue: 255, alpha };
}

const createCircle = (distanceFromCenter, circleRadius, ray, angle, step) => {
	const circle = document.createElementNS(svgns, 'circle');
	const cx = distanceFromCenter * Math.cos(2 * angle * ray) + windowCenterX;
	const cy = distanceFromCenter * Math.sin(2 * angle * ray) + windowCenterY;

	circle.setAttributeNS(null, 'r', circleRadius);
	circle.setAttributeNS(null, 'ray', ray);
	circle.setAttributeNS(null, 'data-step', step);
	

	const color = getCircleColor(distanceFromCenter, circleRadius, ray, angle, step);
	circle.setAttributeNS(null, 'style', `fill: rgba(${color.red},${color.green},${color.blue}, ${color.alpha});`);
	circle.setAttributeNS(null, 'cx', cx);
	circle.setAttributeNS(null, 'cy', cy);

	return circle;
};

angleRatios.forEach(angleRatio => {
		const angle = angleRatio * Math.PI;	
		const factor = (1+Math.sin(angle))/(1-Math.sin(angle));
		const centerFactor = (1/(Math.sqrt(2) * Math.sin(angle)));
		const numberOfRays = 2 / angleRatio;

		let step = 1;
		let radius = minimalRadius;
		let center = radius * centerFactor - centerFactor;
		let distanceFromCenter = Math.sqrt(2) * center;

		while (distanceFromCenter + radius < maximumGraphRadius) {
			for (let ray = 0; ray < numberOfRays; ray++) {
				const circle = createCircle(distanceFromCenter, radius, ray, angle, step);
				svg.appendChild(circle);
			}

			step++;
			radius = radius * factor;
			center = radius * centerFactor - centerFactor;
			distanceFromCenter = Math.sqrt(2) * center;
		}
});


]]></script>
</svg>
