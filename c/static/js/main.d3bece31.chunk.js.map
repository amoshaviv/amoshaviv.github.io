{"version":3,"sources":["theme.js","components/Toolbar.js","utils/svg.js","utils/calculations.js","components/Grid.js","components/Circles.js","components/Tooltip.js","components/Graph.js","constants/defaultConfig.js","App.js","utils/navigation.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","Toolbar","setConfig","config","beamsText","beams","join","ringsText","rings","reduce","str","ringFilter","idx","Array","isArray","isNaN","Box","pt","pb","method","id","Grid","container","spacing","item","xs","sm","md","lg","TextField","name","fullWidth","label","defaultValue","variant","maximumRings","maximumBeams","Button","size","type","shouldCreateCircle","ring","beam","gridLines","horizontal","vertical","i","push","x1","y1","x2","y2","concat","getGridLines","withStyles","line","text","letterSpacing","classes","map","gridLine","key","stroke","strokeWidth","className","x","y","fontSize","toFixed","circle","fill","circles","onCircleClick","onCircleBlur","useState","selectedCircleElement","setSelectedCircleElement","onClick","ev","circleElement","setAttribute","handleCircleClick","target","onBlur","console","log","numberOfBeams","cx","cy","r","radius","tooltip","clickLocation","hoveredCircle","tooltipText","useRef","width","current","getBBox","height","textX","textY","ref","dy","Graph","svg","setClickLocation","setHoveredCircle","rect","currentTarget","getBoundingClientRect","clientX","left","clientY","top","preventDefault","stopPropagation","viewBox","xmlns","App","qsConfig","output","querystring","qs","parse","window","location","search","ignoreQueryPrefix","split","Number","parseInt","filter","parsedMaximumBeams","parsedMaximumRings","indexOf","range","length","parseConfigFromQueryString","initialConfig","Object","assign","defaultConfig","initialCircles","arr","angle","Math","PI","sinOfAngle","sin","factor","distanceFromCenter","maximumNumberOfBeams","min","cos","getCirclesForNumberOfBeams","Container","Boolean","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d3bece31.chunk.js","sourcesContent":["import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { getRingFiltersText } from '../utils/svg';\n\nfunction Toolbar({ setConfig, config }) {\n  const handleSubmit = (ev) => {\n    ev.preventDefaults();\n  };\n\n  const beamsText = config.beams ? config.beams.join(',') : '';\n  const ringsText = getRingFiltersText(config.rings);\n\n  return (\n    <Box pt={2} pb={1}>\n      <form method=\"get\" id=\"toolbar\">\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={12} md={3} lg={3}>\n            <TextField\n              id=\"beams\"\n              name=\"beams\"\n              fullWidth\n              label=\"Beams\"\n              defaultValue={beamsText}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={3} lg={3}>\n            <TextField\n              id=\"rings\"\n              name=\"rings\"\n              fullWidth\n              label=\"Rings\"\n              defaultValue={ringsText}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={3} lg={3}>\n            <TextField\n              id=\"maximumRings\"\n              name=\"maximumRings\"\n              fullWidth\n              label=\"Maximum Rings\"\n              defaultValue={config.maximumRings}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={3} lg={3}>\n            <TextField\n              id=\"maximumBeams\"\n              name=\"maximumBeams\"\n              fullWidth\n              label=\"Maximum Beams\"\n              defaultValue={config.maximumBeams}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={12} lg={12}>\n            <Button fullWidth size=\"large\" variant=\"outlined\" type=\"submit\">Update</Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n}\n\nexport default Toolbar;\n","export function getRingFiltersText(ringFilters) {\n  return ringFilters.reduce((str, ringFilter, idx) => {\n    if (idx > 0) str += \",\";\n    if (Array.isArray(ringFilter))\n      return (str + ringFilter[0] + \"-\" + ringFilter[1]);\n    if (!isNaN(ringFilter)) return str + ringFilter;\n  }, \"\");\n}\n","const shouldCreateCircle = (config, ring, beam) => {\n  if (!config.rings) return true;\n  if (config.rings) {\n    for (let ringFilter of config.rings) {\n      if (Array.isArray(ringFilter)) {\n        if (ring > ringFilter[0] && ring < ringFilter[1]) return true;\n      }\n      if (!isNaN(ringFilter) && ringFilter === ring) return true;\n    }\n  }\n\n  return false;\n};\n\nexport function getCirclesForNumberOfBeams(numberOfBeams, config) {\n  const output = [];\n  const angle = Math.PI / numberOfBeams;\n  const sinOfAngle = Math.sin(angle);\n  const factor = (1 - sinOfAngle) / (1 + sinOfAngle);\n\n  let distanceFromCenter = 1 / (1 + sinOfAngle);\n  let radius = sinOfAngle / (1 + sinOfAngle);\n\n  const maximumNumberOfBeams = config.maximumBeams\n    ? Math.min(config.maximumBeams, numberOfBeams)\n    : numberOfBeams;\n\n  let ring = 0;\n  while (radius > 0.000001) {\n    for (let beam = 0; beam < maximumNumberOfBeams; beam++) {\n      if (shouldCreateCircle(config, ring, beam)) {\n        const cx = 1 + distanceFromCenter * Math.cos(angle * 2 * beam);\n        const cy = 1 + distanceFromCenter * Math.sin(angle * 2 * beam);\n\n        output.push({\n          cy,\n          cx,\n          radius,\n          beam,\n          angle,\n          ring,\n          numberOfBeams,\n          distanceFromCenter,\n        });\n      }\n    }\n\n    radius = radius * factor;\n    distanceFromCenter = distanceFromCenter * factor;\n    ring++;\n  }\n\n  return output;\n}\n\nexport function getGridLines() {\n  const horizontal = [];\n  const vertical = [];\n  const density = 20;\n\n  for (let i = 0; i <= 2 * density; i++) {\n    horizontal.push({\n      x1: i / density,\n      y1: 0,\n      x2: i / density,\n      y2: 2,\n    });\n    vertical.push({\n      y1: i / density,\n      x1: 0,\n      y2: i / density,\n      x2: 2,\n    });\n  }\n\n  return horizontal.concat(vertical);\n}\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { getGridLines } from \"../utils/calculations\";\nconst gridLines = getGridLines();\n\nconst styles = (theme) => ({\n  line: {\n    \n  },\n  text: {\n    letterSpacing: \"normal\",\n  },\n});\n\nfunction Grid({ classes }) {\n  return (\n    <>\n      {gridLines.map((gridLine, idx) => ([\n          <line\n            key={`grid-line-${idx}`}\n            x1={gridLine.x1}\n            y1={gridLine.y1}\n            x2={gridLine.x2}\n            y2={gridLine.y2}\n            stroke=\"rgba(0,0,0,0.2)\"\n            strokeWidth=\"0.001\"\n            className={classes.line}\n          />,\n          <text\n            key={`grid-line-text-${idx}`}\n            className={classes.text}\n            x={gridLine.x1}\n            y={2 - gridLine.y1}\n            fontSize=\"0.02\"\n          >\n            {((gridLine.y1 || gridLine.x1) - 1).toFixed(2)}\n          </text>\n      ]))}\n      )}\n    </>\n  );\n}\n\nexport default withStyles(styles)(Grid);\n","import React, { useState, useRef } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  circle: {\n    \"&:hover\": {\n      fill: \"red\",\n    },\n  },\n});\n\nfunction Circles({ circles, onCircleClick, onCircleBlur, classes }) {\n  const [selectedCircleElement, setSelectedCircleElement] = useState(null);\n\n  const handleCircleClick = (circleElement, circle) => {\n    if (circleElement) {\n        if (selectedCircleElement) selectedCircleElement.setAttribute('fill', 'rgba(0,0,0,0.1)');\n        circleElement.setAttribute('fill', 'yellow');\n        setSelectedCircleElement(circleElement);\n    }\n    onCircleClick(circle);\n  };\n\n  return circles.map((circle) => (\n    <circle\n      className={classes.circle}\n      onClick={(ev) => handleCircleClick(ev.target, circle)}\n      onBlur={(ev) => console.log(ev.target)}\n      key={`circle-a${circle.numberOfBeams}-b${circle.beam}-r${circle.ring}`}\n      fill=\"rgba(0,0,0,0.1)\"\n      cx={circle.cx}\n      cy={circle.cy}\n      r={circle.radius}\n    />\n  ));\n}\n\nexport default withStyles(styles)(Circles);\n","import React, { useRef } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  tooltip: {\n    letterSpacing: \"normal\",\n  },\n});\n\nfunction Tooltip({ clickLocation, hoveredCircle, classes }) {\n  const tooltipText = useRef(null);\n\n  const width = tooltipText.current ? tooltipText.current.getBBox().width : 0;\n  const height = tooltipText.current ? tooltipText.current.getBBox().height : 0;\n  const x = clickLocation.x * 2;\n  const y = clickLocation.y * 2;\n  const textX = x + width > 2 ? x - width : x;\n  const textY = y;\n  const pointRadius = 0.005;\n\n  return [\n    <circle cx={x} cy={y} fill=\"blue\" r={pointRadius}></circle>,\n    <text\n      key=\"text\"\n      className={classes.tooltip}\n      x={textX}\n      y={textY}\n      fontSize=\"0.05\"\n      fill=\"white\"\n      stroke=\"black\"\n      strokeWidth=\"0.002\"\n      ref={tooltipText}\n    >\n        <tspan x={textX} dy=\"1.2em\">x: {(clickLocation.x * 2 - 1).toFixed(4)}</tspan>\n        <tspan x={textX} dy=\"1.2em\">y: {(1  - clickLocation.y * 2).toFixed(4)}</tspan>\n        {hoveredCircle && <tspan x={textX} dy=\"1.2em\">Circle: {hoveredCircle.beam}/{hoveredCircle.numberOfBeams}</tspan>}\n    </text>,\n  ];\n}\n\nexport default withStyles(styles)(Tooltip);\n","import React, { useState, useRef } from \"react\";\nimport Grid from \"./Grid\";\nimport Circles from \"./Circles\";\nimport Tooltip from \"./Tooltip\";\n\nfunction Graph({ config, circles }) {\n  const svg = useRef(null);\n  const [clickLocation, setClickLocation] = useState(null);\n  const [hoveredCircle, setHoveredCircle] = useState(null);\n\n  const handleBlur = (ev) => {\n    setClickLocation(null);\n  }\n\n  const onCircleClick = (circle) => {\n      setHoveredCircle(circle);\n  }\n\n  const handleClick = (ev) => {\n    const rect = ev.currentTarget.getBoundingClientRect();\n    const x = (ev.clientX - rect.left) / rect.width; \n    const y = (ev.clientY - rect.top) / rect.height;\n    \n\n    setClickLocation({ x,y });\n    \n    //  Prevent default\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  return (\n    <svg\n      onBlur={handleBlur}\n      onClick={handleClick}\n      viewBox=\"0 0 2 2\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={svg}\n    >\n      <Circles circles={circles} onCircleClick={onCircleClick} />\n      {clickLocation && <Tooltip hoveredCircle={hoveredCircle} clickLocation={clickLocation}/>}\n      {/* <Grid /> */}\n    </svg>\n  );\n}\n\nexport default Graph;\n","const getNaturalNumbers = () => {\n  const output = [];\n\n  for (let i = 2; i < 100; i++) output.push(i);\n\n  return output;\n};\n\nconst getPrimes = () => {\n  return [\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    53,\n    59,\n    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97,\n  ];\n};\n\nexport default {\n  beams: getPrimes(),\n  rings: [[1,20]],\n};\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from './components/Toolbar';\nimport Graph from './components/Graph';\nimport defaultConfig from './constants/defaultConfig';\nimport { getCirclesForNumberOfBeams } from \"./utils/calculations\";\nimport { parseConfigFromQueryString } from \"./utils/navigation\";\n\nfunction App() {\n  const qsConfig = parseConfigFromQueryString();\n\n  const initialConfig = Object.assign({}, defaultConfig, qsConfig);\n  const [config, setConfig] = useState(initialConfig);\n\n  const initialCircles = initialConfig.beams.reduce((arr, numberOfBeams)=>arr.concat(getCirclesForNumberOfBeams(numberOfBeams,initialConfig)), []);\n  const [circles, setCircles] = useState(initialCircles);\n  \n  return (\n    <Container>\n      <Toolbar config={config} setConfig={setConfig}/>\n      <Graph config={config} circles={circles} />\n    </Container>\n  );\n}\n\nexport default App;\n","import qs from \"qs\";\n\nexport function parseConfigFromQueryString() {\n  const output = {};\n  const querystring = qs.parse(window.location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  if (querystring) {\n    // Parse beams configuration\n    if (querystring.beams) {\n      output.beams = querystring.beams\n        .split(\",\")\n        .map((beam) => {\n          return Number.parseInt(beam);\n        })\n        .filter((beam) => !isNaN(beam));\n    }\n\n    // Parse maximum beams to display\n    if (querystring.maximumBeams) {\n      const parsedMaximumBeams = Number.parseInt(querystring.maximumBeams);\n      if (!isNaN(parsedMaximumBeams)) output.maximumBeams = parsedMaximumBeams;\n    }\n\n    // Parse maximum rings\n    if (querystring.maximumRings) {\n      const parsedMaximumRings = Number.parseInt(querystring.maximumRings);\n      if (!isNaN(parsedMaximumRings)) output.maximumRings = parsedMaximumRings;\n    }\n\n    // Parse rings configuration\n    if (querystring.rings) {\n      output.rings = querystring.rings\n        .split(\",\")\n        .map((ring) => {\n            console.log(ring)\n          if (ring.indexOf(\"-\") > -1) {\n            const range = ring\n              .split(\"-\")\n              .map((ring) => Number.parseInt(ring))\n              .filter((ring) => !isNaN(ring));\n            if (range.length === 2) return range;\n          }\n\n          return Number.parseInt(ring);\n        })\n        .filter((ring) => { \n            if(Array.isArray(ring)) return true;\n            return !isNaN(ring)\n        });\n\n        console.log(output.rings);\n    }\n  }\n\n  return output;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}