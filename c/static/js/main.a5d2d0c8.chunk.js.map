{"version":3,"sources":["theme.js","components/Toolbar.js","components/Grid.js","utils/calculations.js","components/Circles.js","components/Tooltip.js","components/Graph.js","constants/defaultConfig.js","App.js","utils/navigation.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","Toolbar","setConfig","config","beamsText","beams","join","Box","pt","pb","method","id","Grid","container","spacing","item","xs","sm","md","lg","TextField","name","fullWidth","label","defaultValue","variant","maximumRings","maximumBeams","Button","size","type","gridLines","horizontal","vertical","i","push","x1","y1","x2","y2","concat","getGridLines","withStyles","line","text","letterSpacing","classes","map","gridLine","idx","key","stroke","strokeWidth","className","x","y","fontSize","toFixed","circle","fill","circles","numberOfBeams","beam","ring","cx","cy","r","radius","tooltip","clickLocation","tooltipText","useRef","width","current","getBBox","height","textX","textY","console","log","ref","Graph","svg","useState","setClickLocation","onBlur","ev","onClick","rect","currentTarget","getBoundingClientRect","clientX","left","clientY","top","preventDefault","stopPropagation","viewBox","xmlns","App","qsConfig","output","querystring","qs","parse","window","location","search","ignoreQueryPrefix","split","Number","parseInt","filter","isNaN","parsedMaximumBeams","parsedMaximumRings","rings","parseConfigFromQueryString","initialConfig","Object","assign","defaultConfig","initialCircles","reduce","arr","angle","Math","PI","sinOfAngle","sin","factor","distanceFromCenter","maximumNumberOfBeams","min","cos","getCirclesForNumberOfBeams","Container","Boolean","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a5d2d0c8.chunk.js","sourcesContent":["import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction Toolbar({ setConfig, config }) {\n  const handleSubmit = (ev) => {\n    ev.preventDefaults();\n  };\n\n  const beamsText = config.beams ? config.beams.join(',') : '';\n\n  return (\n    <Box pt={2} pb={1}>\n      <form method=\"get\" id=\"toolbar\">\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={12} md={4} lg={4}>\n            <TextField\n              id=\"beams\"\n              name=\"beams\"\n              fullWidth\n              label=\"Beams\"\n              defaultValue={beamsText}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={4} lg={4}>\n            <TextField\n              id=\"maximumRings\"\n              name=\"maximumRings\"\n              fullWidth\n              label=\"Maximum Rings\"\n              defaultValue={config.maximumRings}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={4} lg={4}>\n            <TextField\n              id=\"maximumBeams\"\n              name=\"maximumBeams\"\n              fullWidth\n              label=\"Maximum Beams\"\n              defaultValue={config.maximumBeams}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={12} md={12} lg={12}>\n            <Button fullWidth size=\"large\" variant=\"outlined\" type=\"submit\">Update</Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n}\n\nexport default Toolbar;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { getGridLines } from \"../utils/calculations\";\nconst gridLines = getGridLines();\n\nconst styles = (theme) => ({\n  line: {\n    \n  },\n  text: {\n    letterSpacing: \"normal\",\n  },\n});\n\nfunction Grid({ classes }) {\n  return (\n    <>\n      {gridLines.map((gridLine, idx) => ([\n          <line\n            key={`grid-line-${idx}`}\n            x1={gridLine.x1}\n            y1={gridLine.y1}\n            x2={gridLine.x2}\n            y2={gridLine.y2}\n            stroke=\"rgba(0,0,0,0.2)\"\n            strokeWidth=\"0.001\"\n            className={classes.line}\n          />,\n          <text\n            key={`grid-line-text-${idx}`}\n            className={classes.text}\n            x={gridLine.x1}\n            y={2 - gridLine.y1}\n            fontSize=\"0.02\"\n          >\n            {((gridLine.y1 || gridLine.x1) - 1).toFixed(2)}\n          </text>\n      ]))}\n      )}\n    </>\n  );\n}\n\nexport default withStyles(styles)(Grid);\n","export function getCirclesForNumberOfBeams(numberOfBeams, config) {\n  const output = [];\n  const angle = Math.PI / numberOfBeams;\n  const sinOfAngle = Math.sin(angle);\n  const factor = (1 - sinOfAngle) / (1 + sinOfAngle);\n\n  let distanceFromCenter = 1 / (1 + sinOfAngle);\n  let radius = sinOfAngle / (1 + sinOfAngle);\n\n  const maximumNumberOfBeams = config.maximumBeams ? Math.min(config.maximumBeams, numberOfBeams) : numberOfBeams;\n\n  for (let ring = 0; ring < config.maximumRings; ring++) {\n    for (let beam = 0; beam < maximumNumberOfBeams; beam++) {\n      const cx = 1 + distanceFromCenter * Math.cos(angle * 2 * beam);\n      const cy = 1 + distanceFromCenter * Math.sin(angle * 2 * beam);\n\n      output.push({ cy, cx, radius, beam, angle, ring, numberOfBeams, distanceFromCenter });\n    }\n\n    radius = radius * factor;\n    distanceFromCenter = distanceFromCenter * factor;\n  }\n\n  return output;\n}\n\nexport function getGridLines() {\n  const horizontal = [];\n  const vertical = [];\n  const density = 20;\n\n  for (let i = 0; i <= 2 * density; i++) {\n    horizontal.push({\n      x1: i / density,\n      y1: 0,\n      x2: i / density,\n      y2: 2,\n    });\n    vertical.push({\n      y1: i / density,\n      x1: 0,\n      y2: i / density,\n      x2: 2,\n    });\n  }\n\n  return horizontal.concat(vertical);\n}\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  circle: {\n    \"&:hover\": {\n      fill: \"red\",\n    },\n  },\n});\n\nfunction Circles({ circles, classes }) {\n  return circles.map((circle) => (\n      <circle\n        className={classes.circle}\n        key={`circle-a${circle.numberOfBeams}-b${circle.beam}-r${circle.ring}`}\n        fill=\"rgba(0,0,0,0.1)\"\n        cx={circle.cx}\n        cy={circle.cy}\n        r={circle.radius}\n      />\n  ));\n}\n\nexport default withStyles(styles)(Circles);\n","import React, { useRef } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  tooltip: {\n    letterSpacing: \"normal\",\n  },\n});\n\nfunction Tooltip({ clickLocation, classes }) {\n  const tooltipText = useRef(null);\n\n  const width = tooltipText.current ? tooltipText.current.getBBox().width: 0;\n  const height = tooltipText.current ? tooltipText.current.getBBox().height: 0;\n  const x = clickLocation.x * 2;\n  const y = clickLocation.y * 2;\n  const textX = (x + width) > 2 ? x - width : x;\n  const textY = y;\n  const pointRadius = 0.005;\n\n  console.log(x,y);\n  return [\n    <circle cx={x} cy={y} fill=\"blue\" r={pointRadius}></circle>,\n    <text\n      key=\"text\"\n      className={classes.tooltip}\n      x={textX}\n      y={textY}\n      fontSize=\"0.05\"\n      fill=\"white\"\n      stroke=\"black\"\n      strokeWidth=\"0.002\"\n      ref={tooltipText}\n    >\n      &nbsp; x: {(clickLocation.x * 2 - 1).toFixed(2)} | y:{\" \"}\n      {(clickLocation.y * 2 - 1).toFixed(2)}\n    </text>,\n  ];\n}\n\nexport default withStyles(styles)(Tooltip);\n","import React, { useState, useRef } from \"react\";\nimport Grid from \"./Grid\";\nimport Circles from \"./Circles\";\nimport Tooltip from \"./Tooltip\";\n\nfunction Graph({ config, circles }) {\n  const svg = useRef(null);\n  const [clickLocation, setClickLocation] = useState(null);\n\n  const handleBlur = (ev) => {\n    setClickLocation(null);\n  }\n\n  const handleClick = (ev) => {\n    const rect = ev.currentTarget.getBoundingClientRect();\n    const x = (ev.clientX - rect.left) / rect.width; \n    const y = (ev.clientY - rect.top) / rect.height;\n    \n\n    setClickLocation({ x,y });\n    \n    //  Prevent default\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  return (\n    <svg\n      onBlur={handleBlur}\n      onClick={handleClick}\n      viewBox=\"0 0 2 2\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={svg}\n    >\n      <Circles circles={circles} />\n      {clickLocation && <Tooltip clickLocation={clickLocation}/>}\n      <Grid />\n    </svg>\n  );\n}\n\nexport default Graph;\n","export default {\n  beams: [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97],\n  maximumRings: 5,\n};\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from './components/Toolbar';\nimport Graph from './components/Graph';\nimport defaultConfig from './constants/defaultConfig';\nimport { getCirclesForNumberOfBeams } from \"./utils/calculations\";\nimport { parseConfigFromQueryString } from \"./utils/navigation\";\n\nfunction App() {\n  const qsConfig = parseConfigFromQueryString();\n\n  const initialConfig = Object.assign({}, defaultConfig, qsConfig);\n  const [config, setConfig] = useState(initialConfig);\n\n  const initialCircles = initialConfig.beams.reduce((arr, numberOfBeams)=>arr.concat(getCirclesForNumberOfBeams(numberOfBeams,initialConfig)), []);\n  const [circles, setCircles] = useState(initialCircles);\n  \n  return (\n    <Container>\n      <Toolbar config={config} setConfig={setConfig}/>\n      <Graph config={config} circles={circles} />\n    </Container>\n  );\n}\n\nexport default App;\n","import qs from \"qs\";\n\nexport function parseConfigFromQueryString() {\n  const output = {};\n  const querystring = qs.parse(window.location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  if (querystring) {\n    // Parse beams configuration\n    if (querystring.beams) {\n      output.beams = querystring.beams\n        .split(\",\")\n        .map((beam) => {\n          return Number.parseInt(beam);\n        })\n        .filter((beam) => !isNaN(beam));\n    }\n\n    // Parse maximum beams to display\n    if (querystring.maximumBeams) {\n      const parsedMaximumBeams = Number.parseInt(querystring.maximumBeams);\n      if (!isNaN(parsedMaximumBeams)) output.maximumBeams = parsedMaximumBeams;\n    }\n\n    // Parse maximum rings\n    if (querystring.maximumRings) {\n      const parsedMaximumRings = Number.parseInt(querystring.maximumRings);\n      if (!isNaN(parsedMaximumRings)) output.maximumRings = parsedMaximumRings;\n    }\n\n    // Parse rings configuration\n    if (querystring.rings) {\n      output.rings = querystring.rings\n        .split(\",\")\n        .map((ring) => {\n          return Number.parseInt(ring);\n        })\n        .filter((ring) => !isNaN(ring));\n    }\n  }\n\n  return output;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}